#include "screen.h"
#include "../kernel/common.h"

int     cursor_x = 0;
int     cursor_y = 0;
u16     *video_memory = (u16 *) VIDEO_ADDRESS;
u16      attribute = WHITE_ON_BLACK << 8;

void    get_cursor();
void    move_cursor();
void    scroll();

void    set_color(color foreground, color background) {
    attribute = (background << 4) | (foreground & 0xf);
}

void    putchar(char c) {
    u16     *location;
    
    // backspace
    if (c == 0x08 && cursor_x > 0) {
        cursor_x--;
    } 
    // tab
    else if (c == 0x09) {
        cursor_x = (cursor_x + 8) & ~(8 - 1);
    }
    // carriage return
    else if (c == '\r') {
        cursor_x = 0;
    }
    // newline
    else if (c == '\n') {
        cursor_x = 0;
        cursor_y++;
    }
    // printable characters
    else if (c >= ' ') {
        location = ((s16 *) VIDEO_ADDRESS) + (cursor_y * MAX_COLS + cursor_x);
        *location = c | attribute << 8;
        cursor_x++;
    }

    // go to next line if end of line reached
    if (cursor_x >= 80) {
        cursor_x = 0;
        cursor_y++;
    }

    // handle scroll if y is out of screen
    scroll();
    // move the hardware cursor
    move_cursor();
}

void    putstr(char *s) {
    int     i;

    i = 0;
    while (s[i])
        putchar(s[i++]);
}

void    clear() {
    int     i;
    u16     blank;

    blank = ' ' | WHITE_ON_BLACK << 8;
    for (i = 0; i < MAX_ROWS * MAX_COLS; i++) {
        ((s16 *) VIDEO_ADDRESS)[i] = blank;
    }

    cursor_x = 0;
    cursor_y = 0;
    move_cursor();
}

void scroll() {
    int     i;
    u16     blank;
    
    if (cursor_y >= 25) {
        // move one row up every line
        for (i = 0; i < 24 * 80; i++) {
            // every char is replaced by the same one
            // one row below
            ((s16 *) VIDEO_ADDRESS)[i] = ((s16 *) VIDEO_ADDRESS)[i + 80];
        }
        
        // blank last line
        // start from 24th row to 25th
        blank = ' ' | WHITE_ON_BLACK << 8;
        for (i = 24 * 80; i < 25 * 80; i++) {
            ((s16 *) VIDEO_ADDRESS)[i] = blank;
        }
        cursor_y = 24;
    }
}

void    get_cursor() {
    // using hardware VGA control registers to get the position
    // of the cursor viewed by the chip
    // it's exprimed in number of chars and not bytes as we do

    // registers 14 and 15 represents high and low bytes
    // which combined gives the offset
    int     location;

    // select high part
    outb(REG_SCREEN_CTRL, 14);
    // read high part
    location = inb(REG_SCREEN_DATA) << 8;
    // select low part
    outb(REG_SCREEN_CTRL, 15);
    // read low part
    location += inb(REG_SCREEN_DATA);

    cursor_y = location / MAX_COLS;
    cursor_x = location % MAX_COLS;
}

void    move_cursor() {
    u16 location = cursor_y * MAX_COLS + cursor_x;
    // set bytes to registers
    outb(REG_SCREEN_CTRL, 14);
    outb(REG_SCREEN_DATA, location >> 8);
    outb(REG_SCREEN_CTRL, 15);
    outb(REG_SCREEN_DATA, location);
}